// Problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.

// function sumOfNaturalNumbers(number){
//   var sum = 0;

//   for (var i = 1; i < number; i++){
//     if (i % 3 === 0 || i % 5 === 0) {
//       sum = sum + i;
//     }
//   }
//   return sum;
// }
// console.log(sumOfNaturalNumbers(100));

// // ----------------------------------------------------------------------------
// Problem 2 

// # Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// var fibonacci = [0, 1, 1, 2];
// var i = 4;
// var sum = 0;

// while (fibonacci[i-1] + fibonacci[i-2] <= 4000000){
//   fibonacci[i] = fibonacci[i-1] + fibonacci[i-2];
//   i += 1;
// }

// for (var j in fibonacci){
//   sum += fibonacci[j];
// }

// console.log(sum);

//  ----------------------------------------------------------------------------

//  Problem 3 

//  The prime factors of 13195 are 5, 7, 13 and 29.
//  What is the largest prime factor of the number 600851475143 

//  I googled how to solve this since I didnt know how. I learned about a 'prime' class. If we require 'prime' then we can tag that to our variables and see all of the prime numbers of that number.

// var originalTarget = 600851475143;
// var target = originalTarget;
// var i = 2;
// while(i<target) {
//   while(target%i === 0) {
//     (function(newtarget) {
//       console.log(target + " can be divided by " + i + " which gives us " + newtarget);
//       target = newtarget;
//     })(target / i)
//   }
//   i++;
// }
// console.log("it seems like " + target + " is the biggest prime factor for " + originalTarget);
// # ----------------------------------------------------------------------------

// # Problem 4 
//  A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

// # Find the largest palindrome made from the product of two 3-digit numbers.

// function palindromic() {
//   var max = 0;
//   for(var i = 999; i > 99; i--) {
//     for(var k = 999; k > 99; k--) {
//       var n = i * k;
//       var s = '' + n;
//       if (s === s.split("").reverse().join("") && n > max) {
//         max = n;
//       }
//     }
//   }
//   return max;
// }
// console.log(palindromic());


// ----------------------------------------------------------------------------
// Problem 5
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

// var count = 1;

// while (true){
//        var num = 20 * count;

//          if (num % 1 === 0 && num % 2 === 0 && num % 3 === 0 && num % 4 === 0 && num % 5 === 0 && num % 6 === 0 && num % 7 === 0 && num % 11 === 0 && num % 12 === 0 && num % 13 === 0 && num % 14 === 0 && num % 15 === 0 && num % 16 === 0 && num % 17 === 0 && num % 18 === 0 && num % 19 === 0 && num % 20 === 0)
//                  console.log(num);
         
//          count += 1;
//  }


// ----------------------------------------------------------------------------


// Problem 6
// function sumSquare(number){
//   var sumSquareSum = 0;
//   var squareSum = 0;
//   for (var i = 1; i <= number; i++){
//     sumSquareSum =  sumSquareSum + i;
//     squareSum = squareSum + ( i * i );
    
//   }
//   return (sumSquareSum * sumSquareSum) - squareSum;
// }
// console.log(sumSquare(10));

// ----------------------------------------------------------------------------
// Problem 7
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

// What is the 10 001st prime number?
require 'prime'

p Prime.take(1)

