# 2018 Resolution is to do one Project Euler problem every single day.

# ----------------------------------------------------------------------------

# # Problem 1 (January 1, 2018)
# # If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

# # Find the sum of all the multiples of 3 or 5 below 1000.
# sum = 0
# n = 0

# 1000.times do
#   if n %3 == 0 || n % 5 == 0
#     sum = sum + n 
#     p sum
#   else

#   end
#     n += 1
# end
# p sum

# ----------------------------------------------------------------------------

# Problem 2 (January 2, 2018)

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

# arr = [1, 2]

# 30.times do
#   new_value = arr.last + (arr[-2])
#   arr << new_value
# end 
# sum = 0
# i = 0
# arr.length.times do
#   if arr[i] %2 === 0 
#     sum += arr[i]
#   else
#   end
#   i +=1 
# end
# p sum

# ----------------------------------------------------------------------------

# Problem 3 (January 3, 2018)

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 

# I googled how to solve this since I didnt know how. I learned about a 'prime' class. If we require 'prime' then we can tag that to our variables and see all of the prime numbers of that number.

# require "prime"

# def problem_three(num)
#     p last_prime = num.prime_division.last # This will give us [6857, 1]
#     # We only want the first one
#     last_prime[0] # or last_prime.first
# end

# puts problem_three(600851475143)

# ----------------------------------------------------------------------------

# Problem 4 (January 4, 2018)
# A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

# Find the largest palindrome made from the product of two 3-digit numbers.

# def problem_4(num1, num2)
#   num1_array = []
#   num2_array = []
#   array_to_test_palindrome = []

#   num1.times do
#     num1_array << num1
#     num1 = num1 - 1
#   end

#   num2.times do
#     num2_array << num2
#     num2 = num2 - 1
#   end

#   num1_array.each do |num1_array_item|
#     num1_array_item
#     num2_array.each do |num2_array_item|
#       num2_array_item
#       array_to_test_palindrome << num1_array_item * num2_array_item
#     end
#   end

#   array_to_test_palindrome.each do |number|
#     number = number.to_s
#     greatest_number = 0 

#     if number == number.reverse

#       if number.to_i > greatest_number
#         greatest_number = number
#         p number
#       end
#     end
#   end
# end

# problem_4(999, 999)
# Answer is 906609

# My code is very messy for this one. I looked in my terminal to find the largest number. It was still good practice.


# ----------------------------------------------------------------------------

# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?


count = 1

while true
        num = 20 * count
        if num % 1 == 0 and num % 2 == 0 and num % 3 == 0 and num % 4 == 0 and num % 5 == 0 and num % 6 == 0 and num % 7 == 0 and num % 11 == 0 and num % 12 == 0 and num % 13 == 0 and num % 14 == 0 and num % 15 == 0 and num % 16 == 0 and num % 17 == 0 and num % 18 == 0 and num % 19 == 0 and num % 20 == 0
                puts num
        end
        count += 1
end